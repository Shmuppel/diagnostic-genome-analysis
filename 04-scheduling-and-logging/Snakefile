configfile: "config.yaml"

rule all:
    message: "Executing all snakefile rules to construct a report on the variances of the samples/genome in the 'data' directory."
    input:
        "report.html"

rule bwa_map:
    message: "Mapping samples against reference genome > Executing bwa mem on the following {input} to generate the following {output}."
    threads: 8
    log:
       "logs/bwa_mem/{sample}.log"
    input:
        config["genome"],
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        "mapped_reads/{sample}.bam"
    threads:
        8
    shell:
        "bwa mem -t {threads} {input} | samtools view -Sb - > {output}"

rule samtools_index:
    message: "Indexing sorted aligned reads > Executing samtools index on the following {input} to generate the following {output}."
    log:
       "logs/samtools_index/{sample}.log"
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    shell:
        "samtools index {input}"

rule samtools_sort:
    message: "Sorting reads > Executing samtools sort on the following {input} to generate the following {output}."
    log:
       "logs/samtools_sort/{sample}.log"
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample} "
        "-O bam {input}"
        " > {output}"

rule bcftools_call:
    message: "Extracting variants from aggregated mapped reads > Executing mpileup and bcftools on the following {input} to generate the following {output}."
    log:
       expand("logs/bcftools_call/{sample}.log", sample=config["samples"])
    input:
        fa= config["genome"],
        bam=expand("sorted_reads/{sample}.bam", sample=config["samples"]),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=config["samples"])
    output:
        "calls/all.vcf"
    shell:
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"


rule report:
    message: "Generating report on the variance between samples and the reference genome."
    input:
        "calls/all.vcf"
    output:
        "report.html"
    run:
        from snakemake.utils import report

        with open(input[0]) as f:
            n_calls = sum(1 for line in f if not line.startswith("#"))

        report("""
        An example workflow
        ===================================

        Reads were mapped to the Yeas reference genome
        and variants were called jointly with
        SAMtools/BCFtools.

        This resulted in {n_calls} variants (see Table T1_).
        """, output[0], metadata="Author: Niels v.d. Vegt", T1=input[0])
