"""
Diagnostic Genome Analysis - Pipeline

Preperation:
    -Retrieving remote genome
	-BWA Index

Pipeline:
	-FastQC
	-Trimmomatic
	-BWA MEM Mapping (paired end)
	-Samtools Sort
	-Markduplicates
	-MpileUp
	-VarScan 2
	-Annovar
"""

configfile: "config.yaml"

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
HTTP = HTTPRemoteProvider()

# FUNCTIONS
def get_sample_from_wildcard(wildcards):
	"""
	Retrieves the files associated from a sample stored in config.yaml.
	Which sample/file to retrieve is based on the wildcard passed as an argument to this function
	either manually or dynamically through 'input = get_sample_from_wildcard'.

	This function (as does the whole pipeline) assumes 2 paired end reads files per sample are stored
	with file name formatting: '{sample}_R1.fastq', ''{sample}_R2.fastq'.
	"""
	if wildcards.sample not in config['samples']:
		pass

	return expand(
		f"{config['samples'][wildcards.sample]}_{{num}}.fastq",
        num=["R1","R2"])


# PREPERATION RULES.
rule get_remote_genome:
    """
    Retrieves a reference genome through HTTP transfer.

    Input: HTTP RemoteProvider object with remote path to reference genome (taken from config["remote_genome_path"]

    Output: Reference genome in Fasta format.
    """
    input:
        HTTP.remote(config["remote_genome_path"], keep_local=True)
    output:
        config["genome"]
    run:
        outputPath = config["genome"]
        shell("mv {input} {outputPath}")

rule get_remote_samples:
    """
    Retrieves samples through HTTP transfer.

    Input: HTTP RemoteProvider object with remote path to reference sample(s) (taken from config["remote_sample_path"]

    Output: Sample reads in Fasta format.
    """
    input:
        expand(HTTP.remote(expand("{sample}", sample=config["remote_sample_paths"].values()), keep_local=True))
    output:
        expand("{sample}", sample = config["samples"].values())
    run:
        for i, file in enumerate(output):
            file_name = os.path.basename(file)
            output_path = os.path.dirname(file)
            shell("mv " + input[i] + " " + file_name)
            shell("mv " + file_name + " " + output_path)

rule get_remote_cardiopanel:
    """
    Retrieves cardiopanel through HTTP transfer.

    Input: HTTP RemoteProvider object with remote path to cardiopanel (taken from config["remote_cardiopanel_path"]

    Output: Cardiopanel in BED format (.txt file format).
    """
    input:
        expand(HTTP.remote(config["remote_cardiopanel_path"], keep_local=True))
    output:
        config["cardiopanel"]
    run:
        outputPath = config["cardiopanel"]
        shell("mv {input} {outputPath}")

rule bwa_index:
	"""
	Index database sequences in the FASTA format.
	
	Input: Reference Genome (FASTA Format or compressed FASTA).
	
	Output: A handfull of files, some in binary, that are used for
			indexing the reference genome. 
	
	Shell: bwa index -a <algorithm for constructing BWT index>
		   <reference genome>
	
	Reference & further info: 
		http://bio-bwa.sourceforge.net/bwa.shtml
	"""
	input:
		config["genome"]
	output:
		expand("{genome}.{ext}",
			genome=config["genome"],
			ext=["amb","ann","bwt","pac","sa"])
	shell:
		"bwa index -a bwtsw {input}"


# PIPELINE RULES.
rule report:
	input:
		expand("fastqc/{sample}_fastqc.html", sample=config["samples"]),
		expand("vcf/{sample}.vcf", sample=config["samples"])

rule fastqc:
	"""
	Perform FastQC Analysis on a sample.
	
	Input:  Single End Fastq sample(s).
	
	Output: Analysis of samples, summarized in an HTML file. 
			Additionaly an archieve of all graphs and figures is constructed.

	Shell: fastqc <input file(s)> --outdir <output directory>

	Reference & further info:
		https://www.bioinformatics.babraham.ac.uk/projects/fastqc/INSTALL.txt
	"""
	input:
		sample=get_sample_from_wildcard
	output:
		"fastqc/{sample}_fastqc.html"
	shell:
		"cat {input} | fastqc --outdir=./fastqc stdin:{wildcards.sample}"

rule trimmomatic:
	""" 
	Trims Data.
	
	Input:  Two fastaQ files. Trimmomatic is set to use paired end trimming
			both forward and reverse reads are expected to be present.
			
	Output: Trimmed sequence reads. Reads that did not make the cut have been moved to
			unpaired archieves (1U and 2U).

	Shell: java -jar <path to trimmomatic.jar>
		PE (Paired End) -basein <input file> -baseout <output file>

		Processing Steps:
		ILLUMINACLIP - Removes Illumina Adapters
			<fasta with illumina adapters>:
			<seed mismatches>:
			<palindrome clip treshold>:
			<simple clip treshold>

		SLIDINGWINDOW - Performs a sliding window trimming.
			<number of bases to average across>:
			<average quality required>

		MINLEN - Removes reads that fall below a given length.
			<minimum length of reads to be kept>

	Reference & further info: 
		http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/TrimmomaticManual_V0.32.pdf
	"""
	input:
		sample=get_sample_from_wildcard
	output:
		expand(["trimmed_samples/{{sample}}_R1_{replicate}.fq.gz",
				"trimmed_samples/{{sample}}_R2_{replicate}.fq.gz"],
			   replicate = ["P", "U"])
	shell:
		"java -jar tools/trimmomatic-0.32-1/jar/trimmomatic.jar "
		"PE {input} {output} "
		"ILLUMINACLIP:tools/trimmomatic-0.32-1/share/TruSeq3-PE.fa:2:30:10 "
		"SLIDINGWINDOW:4:20 "
		"MINLEN:70"

rule bwa_mem:
	"""
	Performs local alignment of samples to a reference genome.
	
	input: Reference genome, indexed; samples that have undergone
		   trimming.
		   
	output: One BAM file containing the mapped sample.
	
	shell: bwa mem -M (for picard compatibility) <input genome and samples> |
		   samtools view -b (to export into BAM file) <output path>
	
	Reference & further info: 
		http://bio-bwa.sourceforge.net/bwa.shtml
	"""
	input:
		config["genome"],
		"trimmed_samples/{sample}_R1_P.fq.gz",
		"trimmed_samples/{sample}_R2_P.fq.gz"
	output:
		"mapped_reads/{sample}.bam"
	threads: 8
	shell:
		"bwa mem -M -t {threads} {input} | samtools view -b > {output}"

rule samtools_sort:
	"""
	Sorts alignments by leftmost coordinates.
	
	Input: BAM file to sort.
	Output: Sorted BAM file.
	
	Shell: samtools sort -O bam (output format) <input BAM> 
		   > <output directory> (move output into directory)
	"""
	input:
		"mapped_reads/{sample}.bam"
	output:
		"sorted_reads/{sample}.bam"
	shell:
		"samtools sort -O bam {input} > {output}"

rule mark_duplicates:
	"""
	Marks duplicates that may have arisen by PCR artifacts.
	
	Input: A sorted BAM file containing the mapped samples.
	Output: A new BAM file, in which duplicates have been identified.
			A metrics file indicating the numbers of duplicates.
			
	Shell: java -jar <path to picard.jar> Markduplicates
		   I=<input BAM file> O=<output BAM file> M=<metrics file>
		   ASSUME_SORTED=true (as BAM is sorted)
	"""
	input:
		"sorted_reads/{sample}.bam"
	output:
		bam="marked_duplicates/marked_{sample}.bam",
		metrics="marked_duplicates/marked_{sample}_metrics.txt"
	shell:
		"java -jar tools/picard/picard.jar "
		"MarkDuplicates I={input} O={output.bam} M={output.metrics} "
		"ASSUME_SORTED=true"
		
rule samtools_mpileup:
	"""
	Convert BAM file into a pileup format file.
	
	Input: Reference genome and BAM file to convert.
	Output: Pileup file containing samples.
	
	Shell: samtools mpileup -f <reference genome> <file to convert>
		   -o <output location>
	"""
	input:
		fa=config["genome"],
		bam="marked_duplicates/marked_{sample}.bam",
	output:
		mpileup="mpileup/mpileup_{sample}.mpileup"
	shell:
		"samtools mpileup -f {input.fa} {input.bam} -o {output.mpileup}"

rule varscan:
	"""
	Identifies SNPs of a mpileup file using VarScan 2.

	Input: mpileup file to scan for variants.
	Output: vcf file containing significant variants.

	Shell: java -jar tools/varscan-v2.3.9/VarScan.jar
		   mpileup2snp <mpileup file>
		   --min-var-freq <minimum allelle frequency>
		   --p-value <p-value treshold>
		   --output-vcf <output to vcf 0/1>"
	"""
	input:
		mpileup="mpileup/mpileup_{sample}.mpileup"
	output:
		vcf="vcf/{sample}.vcf"
	shell:
		"java -jar tools/varscan-v2.3.9/VarScan.jar "
		"mpileup2snp {input.mpileup} --min-var-freq 0.3 --p-value 0.05 "
		"--output-vcf 1 > {output.vcf}"
