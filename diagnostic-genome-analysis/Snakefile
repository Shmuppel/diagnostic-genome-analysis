"""
Diagnostic Genome Analysis - Snakemake Pipeline

Preperation:
    -Retrieving remote genome (code provided, but currently offline)
	-BWA Index

Pipeline tools:
	-FastQC
	-Trimmomatic
	-BWA MEM Mapping
	-Samtools Sort
	-Markduplicates
	-MpileUp
	-VarScan 2
	-Annovar
"""

configfile: "config.yaml"

from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
import sys
HTTP = HTTPRemoteProvider()

# FUNCTIONS
def get_sample_from_wildcard(wildcards):
	"""
	Retrieves the files associated from a sample stored in config.yaml.
	Which sample/file to retrieve is based on the wildcard passed as an argument to this function
	either manually or dynamically through 'input = get_sample_from_wildcard'.

	This function (as does the whole pipeline) assumes 2 paired end reads files per sample are stored
	with file name formatting: '{sample}_R1.fastq', ''{sample}_R2.fastq'.
	"""
	return expand(
		f"{config['samples'][wildcards.sample]}_{{num}}.fastq",
        num=["R1","R2"])


# PREPERATION RULES.
# Remote genome currently not possible as galaxy.bioinf.nl shared datasets are offline.
# rule get_remote_genome:
#     """
#     Retrieves a reference genome through HTTP transfer.
#
#     Input: HTTP RemoteProvider object with remote path to reference genome (taken from config["remote_genome_path"]
#
#     Output: Reference genome in Fasta format.
#     """
#     input:
#         HTTP.remote(config["remote_genome_path"], keep_local=True)
#     output:
#         config["genome"]
#     run:
#         outputPath = config["genome"]
#         shell("mv {input} {outputPath}")

rule bwa_index:
	"""
	Index database sequences in the FASTA format.
	
	Input: Reference Genome (FASTA Format or compressed FASTA).
	
	Output: A handfull of files, some in binary, that are used for
			indexing the reference genome. 
	
	Shell: bwa index -a <algorithm for constructing BWT index>
		   <reference genome>
	
	Reference & further info: 
		http://bio-bwa.sourceforge.net/bwa.shtml

	Citation: Li H. (2013) Aligning sequence reads, clone sequences and
		assembly contigs with BWA-MEM. arXiv:1303.3997v1 [q-bio.GN].
	"""
	input:
		config["genome"]
	output:
		expand("{genome}.{ext}",
			genome=config["genome"],
			ext=["amb","ann","bwt","pac","sa"])
	shell:
		"bwa index -a bwtsw {input}"


# PIPELINE RULES.
rule report:
	input:
		expand("fastqc/{sample}_fastqc.html", sample=config["samples"]),
		expand("annovar/{sample}.hg19_multianno.txt", sample=config["samples"])

rule fastqc:
	"""
	Perform FastQC Analysis on a sample.
	
	Input:  Single End Fastq sample(s).
	
	Output: Analysis of samples, summarized in an HTML file. 
			Additionaly an archieve of all graphs and figures is constructed.

	Shell: "cat {input} | fastqc --outdir=./fastqc stdin:<file name to stream data into>"

	Reference & further info:
		https://www.bioinformatics.babraham.ac.uk/projects/fastqc/INSTALL.txt

	Citation: Andrews S. (2010). FastQC: a quality control tool for high throughput sequence data.
		Available online at: http://www.bioinformatics.babraham.ac.uk/projects/fastqc
	"""
	input:
		sample=get_sample_from_wildcard
	output:
		"fastqc/{sample}_fastqc.html"
	shell:
		"cat {input} | fastqc --outdir=./fastqc stdin:{wildcards.sample}"

rule trimmomatic:
	""" 
	Trims reads, removes ILLUMINACLIP artifacts, and removes low length reads.
	
	Input:  Two fastaQ files. Trimmomatic is set to use paired end trimming
			both forward and reverse reads are expected to be present.
			
	Output: Trimmed sequence reads. Reads that did not make the cut have been moved to
			unpaired archieves (1U and 2U).

	Shell: java -jar <path to trimmomatic.jar>
		PE (Paired End) -basein <input file> -baseout <output file>

		Processing Steps:
		ILLUMINACLIP - Removes Illumina Adapters
			<fasta with illumina adapters>:
			<seed mismatches>:
			<palindrome clip treshold>:
			<simple clip treshold>

		SLIDINGWINDOW - Performs a sliding window trimming.
			<number of bases to average across>:
			<average quality required>

		MINLEN - Removes reads that fall below a given length.
			<minimum length of reads to be kept>

	Reference & further info: 
		http://www.usadellab.org/cms/uploads/supplementary/Trimmomatic/TrimmomaticManual_V0.32.pdf

	Citation: Citations. Bolger, A. M., Lohse, M., & Usadel, B. (2014).
		Trimmomatic: A flexible trimmer for Illumina Sequence Data.
	"""
	input:
		tool=config["trimmomatic_tool"],
		sample=get_sample_from_wildcard
	output:
		expand(["trimmed_samples/{{sample}}_R1_{replicate}.fq.gz",
				"trimmed_samples/{{sample}}_R2_{replicate}.fq.gz"],
			   replicate = ["P", "U"])
	shell:
		"java -jar {input.tool} "
		"PE {input.sample} {output} "
		"ILLUMINACLIP:tools/trimmomatic-0.32-1/share/TruSeq3-PE.fa:2:30:10 "
		"SLIDINGWINDOW:4:20 "
		"MINLEN:70"

rule bwa_mem:
	"""
	Performs local alignment of samples to a reference genome.
	
	Input: Reference genome, indexed; samples that have undergone
		   trimming.
		   
	Output: One BAM file containing the mapped sample.
	
	Shell: bwa mem -M (for picard compatibility) <input genome and samples> |
		   samtools view -b (to export into BAM file) <output path>
	
	Reference & further info: 
		http://bio-bwa.sourceforge.net/bwa.shtml

	Citation: Li H. (2013) Aligning sequence reads, clone sequences and
		assembly contigs with BWA-MEM. arXiv:1303.3997v1 [q-bio.GN].
	"""
	input:
		config["genome"],
		"trimmed_samples/{sample}_R1_P.fq.gz",
		"trimmed_samples/{sample}_R2_P.fq.gz"
	output:
		"mapped_reads/{sample}.bam"
	threads: 8
	shell:
		"bwa mem -M -t {threads} {input} | samtools view -b > {output}"

rule samtools_sort:
	"""
	Sorts alignments by leftmost coordinates.
	
	Input: BAM file to sort.

	Output: Sorted BAM file.
	
	Shell: samtools sort -O bam (output format) <input BAM> 
		   > <output directory> (move output into directory)

	Citation: Li H.*, Handsaker B.*, Wysoker A., Fennell T., Ruan J., Homer N.,
		Marth G., Abecasis G., Durbin R. and 1000 Genome Project Data Processing Subgroup (2009)
		The Sequence alignment/map (SAM) format and SAMtools. Bioinformatics, 25, 2078-9. [PMID: 19505943]
	"""
	input:
		"mapped_reads/{sample}.bam"
	output:
		"sorted_reads/{sample}.bam"
	shell:
		"samtools sort -O bam {input} > {output}"

rule mark_duplicates:
	"""
	Marks duplicates that may have arisen by PCR artifacts.
	
	Input: A sorted BAM file containing the mapped samples.

	Output: A new BAM file, in which duplicates have been identified.
			A metrics file indicating the numbers of duplicates.
			
	Shell: java -jar <path to picard.jar> Markduplicates
		   I=<input BAM file> O=<output BAM file> M=<metrics file>
		   ASSUME_SORTED=true (as BAM is sorted by samtools)

	Citation: “Picard Toolkit.” 2019. Broad Institute, GitHub Repository.
		http://broadinstitute.github.io/picard/; Broad Institute
	"""
	input:
		tool=config["picard_tool"],
		sample="sorted_reads/{sample}.bam"
	output:
		bam="marked_duplicates/marked_{sample}.bam",
		metrics="marked_duplicates/marked_{sample}_metrics.txt"
	shell:
		"java -jar {input.tool} "
		"MarkDuplicates I={input.sample} O={output.bam} M={output.metrics} "
		"ASSUME_SORTED=true"
		
rule samtools_mpileup:
	"""
	Convert BAM file into a pileup format file.
	
	Input: Reference genome and BAM file to convert.

	Output: Pileup file containing samples.
	
	Shell: samtools mpileup -f <reference genome> <file to convert> -o <output location>

	Citation: Li H.*, Handsaker B.*, Wysoker A., Fennell T., Ruan J., Homer N.,
		Marth G., Abecasis G., Durbin R. and 1000 Genome Project Data Processing Subgroup (2009)
		The Sequence alignment/map (SAM) format and SAMtools. Bioinformatics, 25, 2078-9. [PMID: 19505943]
	"""
	input:
		reference_genome=config["genome"],
		bam="marked_duplicates/marked_{sample}.bam",
	output:
		mpileup="mpileup/mpileup_{sample}.mpileup"
	shell:
		"samtools mpileup -f {input.reference_genome} {input.bam} -o {output.mpileup}"

rule varscan:
	"""
	Identifies SNPs of a mpileup file using VarScan 2.

	Input: mpileup file to scan for variants.

	Output: vcf file containing filtered variants.

	Shell: java -jar tools/varscan-v2.3.9/VarScan.jar
		   mpileup2snp <mpileup file>
		   --min-var-freq <minimum allelle frequency>
		   --p-value <p-value treshold>
		   --output-vcf <output to vcf 0/1>

	Citation: Koboldt, D. C. and Zhang, Q. and Larson, D. E. and Shen, D. and McLellan,
		M. D. and Lin, L. and Miller, C. A. and Mardis, E. R. and Ding, L. and Wilson, R. K. (2012).
		VarScan 2: Somatic mutation and copy number alteration discovery in cancer by exome sequencing.
		In Genome Research, 22 (3), pp. 568–576.
	"""
	input:
		tool=config["varscan_tool"],
		mpileup="mpileup/mpileup_{sample}.mpileup"
	output:
		vcf="vcf/vcf_{sample}.vcf"
	shell:
		"java -jar {input.tool} "
		"mpileup2snp {input.mpileup} --min-var-freq 0.3 --p-value 0.99 "
		"--output-vcf 1 > {output.vcf}"

rule annovar:
	"""
	Input: vcf file containing filtered variants.

	Output:

	Shell: -remove <remove temp files>
		   -nastring <fill fields without annotiation>

	Citation: Wang K, Li M, Hakonarson H. ANNOVAR: Functional annotation of genetic
		variants from next-generation sequencing data, Nucleic Acids Research,
		38:e164, 2010
	"""
	input:
		tool=config["annovar_tool"],
		humandb=config["humandb"],
		vcf="vcf/vcf_A.vcf"
	output:
		"annovar/{sample}.hg19_multianno.txt",
		"annovar/{sample}.hg19_multianno.vcf"
	run:
		# Download the appropiate databases
		shell("{input.tool}annotate_variation.pl -buildver hg19 -downdb -webfrom annovar refGene {input.humandb} ")
		shell("{input.tool}annotate_variation.pl -buildver hg19 -downdb -webfrom annovar exac03 {input.humandb} ")
		shell("{input.tool}annotate_variation.pl -buildver hg19 -downdb -webfrom annovar avsnp138 {input.humandb} ")
		shell("{input.tool}annotate_variation.pl -buildver hg19 -downdb -webfrom annovar ljb26_all {input.humandb} ")
		shell("{input.tool}annotate_variation.pl -buildver hg19 -downdb -webfrom annovar 1000g2014oct {input.humandb} ")
		shell("{input.tool}annotate_variation.pl -buildver hg19 -downdb -webfrom annovar clinvar_20190305 {input.humandb} ")
		# Perform table.annover.pl
		shell("{input.tool}table_annovar.pl -vcfinput {input.vcf} -out annovar/{wildcards.sample} -buildver hg19 {input.humandb} "
			  "-polish -remove "
			  "-protocol refGene,exac03,avsnp138,ljb26_all,ALL.sites.2014_10,clinvar_20190305 "
			  "-operation g,f,f,f,f,f ")
		# Clean up databases
		# shell("rm {input.humandb}*")
